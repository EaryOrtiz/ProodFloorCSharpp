@model ProdFloor.Models.ViewModels.Job.JobSearchViewModel
@inject SignInManager<AppUser> SignInManager ;
@inject UserManager<AppUser> UserManager ;

@foreach (var j in Model.JobsSearchList)
{
    string JobTypeName = Model.JobTypelist.FirstOrDefault(m => m.JobTypeID == j.JobTypeID).Name;
    City cityAux = Model.Citylist.FirstOrDefault(m => m.CityID == j.CityID);
    State StateAux = Model.Statelist.FirstOrDefault(m => m.StateID == cityAux.StateID);
    <div class="card card-outline-primary m-1 p-1">
        <div class="bg-faded p-1">
            <h4>
                Job #@j.JobNum
                @{
                    JobExtension JobExtensionAux = Model.JobExtensionList.FirstOrDefault(m => m.JobID == j.JobID);
                    HoistWayData hoistAux = Model.HoistWayDataList.FirstOrDefault(m => m.JobID == j.JobID);

                }
                @if (j.Status != "Incomplete")
                {
                    @if (j._SpecialFeatureslist.Any(s => !String.IsNullOrEmpty(s.Description)))
                    {
                        <span class="badge badge-pill badge-info" style="float:right" data-toggle="tooltip" data-placement="bottom" title="Special Features: @foreach(var f in j._SpecialFeatureslist){@f.Description<hr/>}">
                            <small>Special Features*</small>
                        </span>
                    }
                    @if (j._GenericFeatures.Roped)
                    {
                        @if (!String.IsNullOrEmpty(j._GenericFeatures.GovModel))
                        {
                            <span class="badge badge-pill badge-success" style="float:right">
                                <small>@j._GenericFeatures.GovModel</small>
                            </span>
                        }
                        else
                        {
                            <span class="badge badge-pill badge-success" style="float:right">
                                <small>Roped: No Set/Reset</small>
                            </span>
                        }
                    }
                    else
                    {
                        <span class="badge badge-pill badge-danger" style="float:right">
                            <small>No Roped Hydro</small>
                        </span>
                    }
                    @if (j._HydroSpecific.Battery)
                    {
                        <span class="badge badge-pill badge-success" style="float:right">
                            <small>@j._HydroSpecific.BatteryBrand</small>
                        </span>
                    }
                    else
                    {
                        <span class="badge badge-pill badge-danger" style="float:right">
                            <small>No Battery</small>
                        </span>
                    }
                    @if (hoistAux.AnyRear)
                    {
                        <span class="badge badge-pill badge-success" style="float:right">
                            <small>Has Rear</small>
                        </span>
                    }
                    else
                    {
                        <span class="badge badge-pill badge-danger" style="float:right">
                            <small>Has Rear</small>
                        </span>
                    }
                    @if (JobExtensionAux.SCOP)
                    {
                        <span class="badge badge-pill badge-success" style="float:right">
                            <small>SCOP</small>
                        </span>
                    }
                    else
                    {
                        <span class="badge badge-pill badge-danger" style="float:right">
                            <small>SCOP</small>
                        </span>
                    }
                    @if (JobExtensionAux.SHC)
                    {
                        <span class="badge badge-pill badge-success" style="float:right">
                            <small>SHC</small>
                        </span>
                    }
                    else
                    {
                        <span class="badge badge-pill badge-danger" style="float:right">
                            <small>SHC</small>
                        </span>
                    }
                    <span class="badge badge-pill badge-primary" style="float:right">
                        <small>@Model.Landinglist.FirstOrDefault(m => m.LandingSystemID == hoistAux.LandingSystemID).Name</small>
                    </span>
                    <span class="badge badge-pill badge-primary" style="float:right">
                        <small>@StateAux.Name - @cityAux.Name</small>
                    </span>
                    @*
            JobType Not needed; M2000 is default
            <span class="badge badge-pill badge-primary" style="float:right">
                <small>@JobTypeName</small>
            </span>
                    *@
                }
                else
                {
                    <span class="badge badge-pill badge-warning" style="float:right">
                        <small>Incomplete</small>
                    </span>
                }
            </h4>
        </div>
        <div class="card-text p-1">
            <form asp-action="Delete" method="post" asp-route-Id="@j.JobID">
                @if (j.Status != "Incomplete" && (UserManager.GetUserAsync(User).Result.EngID == j.EngID || User.IsInRole("Admin")))
                {
                    <a asp-action="Edit" class="btn btn-sm btn-warning"
                       asp-route-Id="@j.JobID">
                        Edit
                    </a>
                }
                else if (j.Status != "Incomplete")
                {
                    <a asp-action="Edit" class="btn btn-sm btn-info"
                       asp-route-Id="@j.JobID">
                        Details
                    </a>
                }
                else if (UserManager.GetUserAsync(User).Result.EngID == j.EngID || User.IsInRole("Admin"))

                {
                    <a asp-action="Continue" class="btn btn-sm btn-warning"
                       asp-route-Id="@j.JobID">
                        Continue
                    </a>
                }
                <!-- Button trigger modal -->
                <button type="button" class="btn btn-danger btn-sm" disabled="@(UserManager.GetUserAsync(User).Result.EngID == j.EngID|| User.IsInRole("Admin") ? false : true)" data-toggle="modal" data-target="#exampleModalCenter @j.JobID">
                    Delete
                </button>
                <!-- Modal -->
                <div class="modal fade" id="exampleModalCenter @j.JobID" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLongTitle"><i class="fas fa-exclamation-triangle"></i>&nbsp;Warning</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                Are you sure want to delete this job #@j.JobNum?
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary btn-sm" data-dismiss="modal">Cancel</button>
                                <button type="submit" class="btn btn-danger btn-sm">
                                    Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
}

